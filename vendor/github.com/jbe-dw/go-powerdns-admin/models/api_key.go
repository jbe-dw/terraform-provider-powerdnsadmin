// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// APIKey ApiKey
//
// A ApiKey that can be used to manage domains through API
//
// swagger:model ApiKey
type APIKey struct {

	// Some user defined description
	Description string `json:"description,omitempty"`

	// domains to which this apikey has access
	Domains PDNSAdminZones `json:"domains,omitempty"`

	// The ID for this key, used in the ApiKey URL endpoint.
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// not used on POST, POSTing to server generates the key material
	Key string `json:"key,omitempty"`

	// ApiKey key is return in plain text only at first POST
	PlainKey string `json:"plain_key,omitempty"`

	// role
	Role *PDNSAdminRole `json:"role,omitempty"`
}

// Validate validates this Api key
func (m *APIKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomains(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIKey) validateDomains(formats strfmt.Registry) error {

	if swag.IsZero(m.Domains) { // not required
		return nil
	}

	if err := m.Domains.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("domains")
		}
		return err
	}

	return nil
}

func (m *APIKey) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(m.Role) { // not required
		return nil
	}

	if m.Role != nil {
		if err := m.Role.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIKey) UnmarshalBinary(b []byte) error {
	var res APIKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
