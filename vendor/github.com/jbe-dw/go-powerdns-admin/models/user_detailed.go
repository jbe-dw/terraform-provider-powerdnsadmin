// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UserDetailed User
//
// User that can access the gui/api
//
// swagger:model UserDetailed
type UserDetailed struct {

	// accounts
	Accounts []*AccountSummary `json:"accounts"`

	// The confirmed status
	Confirmed bool `json:"confirmed,omitempty"`

	// Email addres for this user
	Email string `json:"email,omitempty"`

	// The firstname of this user
	Firstname string `json:"firstname,omitempty"`

	// The ID for this user (unique)
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// The lastname of this user
	Lastname string `json:"lastname,omitempty"`

	// OTP secret
	OtpSecret string `json:"otp_secret,omitempty"`

	// The hashed password for this user
	Password string `json:"password,omitempty"`

	// role
	Role *PDNSAdminRole `json:"role,omitempty"`

	// The username for this user (unique, immutable)
	Username string `json:"username,omitempty"`
}

// Validate validates this user detailed
func (m *UserDetailed) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserDetailed) validateAccounts(formats strfmt.Registry) error {

	if swag.IsZero(m.Accounts) { // not required
		return nil
	}

	for i := 0; i < len(m.Accounts); i++ {
		if swag.IsZero(m.Accounts[i]) { // not required
			continue
		}

		if m.Accounts[i] != nil {
			if err := m.Accounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserDetailed) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(m.Role) { // not required
		return nil
	}

	if m.Role != nil {
		if err := m.Role.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserDetailed) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserDetailed) UnmarshalBinary(b []byte) error {
	var res UserDetailed
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
