// Code generated by go-swagger; DO NOT EDIT.

package apikey

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new apikey API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for apikey API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	APIDeleteApikey(params *APIDeleteApikeyParams, authInfo runtime.ClientAuthInfoWriter) (*APIDeleteApikeyNoContent, error)

	APIGenerateApikey(params *APIGenerateApikeyParams, authInfo runtime.ClientAuthInfoWriter) (*APIGenerateApikeyCreated, error)

	APIGetApikeyByID(params *APIGetApikeyByIDParams, authInfo runtime.ClientAuthInfoWriter) (*APIGetApikeyByIDOK, error)

	APIGetApikeys(params *APIGetApikeysParams, authInfo runtime.ClientAuthInfoWriter) (*APIGetApikeysOK, error)

	APIUpdateApikey(params *APIUpdateApikeyParams, authInfo runtime.ClientAuthInfoWriter) (*APIUpdateApikeyNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  APIDeleteApikey deletes the Api key with apikey id
*/
func (a *Client) APIDeleteApikey(params *APIDeleteApikeyParams, authInfo runtime.ClientAuthInfoWriter) (*APIDeleteApikeyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDeleteApikeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_delete_apikey",
		Method:             "DELETE",
		PathPattern:        "/pdnsadmin/apikeys/{apikey_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDeleteApikeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIDeleteApikeyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_delete_apikey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APIGenerateApikey adds a Api key key

  This methods add a new ApiKey. The actual key can be generated by the server or be provided by the client
*/
func (a *Client) APIGenerateApikey(params *APIGenerateApikeyParams, authInfo runtime.ClientAuthInfoWriter) (*APIGenerateApikeyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIGenerateApikeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_generate_apikey",
		Method:             "POST",
		PathPattern:        "/pdnsadmin/apikeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIGenerateApikeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIGenerateApikeyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_generate_apikey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APIGetApikeyByID gets a specific apikey on the server hashed
*/
func (a *Client) APIGetApikeyByID(params *APIGetApikeyByIDParams, authInfo runtime.ClientAuthInfoWriter) (*APIGetApikeyByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIGetApikeyByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_get_apikey_by_id",
		Method:             "GET",
		PathPattern:        "/pdnsadmin/apikeys/{apikey_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIGetApikeyByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIGetApikeyByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_get_apikey_by_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APIGetApikeys gets all Api key on the server except the actual key
*/
func (a *Client) APIGetApikeys(params *APIGetApikeysParams, authInfo runtime.ClientAuthInfoWriter) (*APIGetApikeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIGetApikeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_get_apikeys",
		Method:             "GET",
		PathPattern:        "/pdnsadmin/apikeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIGetApikeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIGetApikeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_get_apikeys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APIUpdateApikey The ApiKey at apikey_id can be changed in multiple ways:
 * Role, description, domains can be updated
 * Role can be changed to Administrator only if user has Operator or Administrator privileges
 * Domains will be updated only if user has access to them
Only the relevant fields have to be provided in the request body.

*/
func (a *Client) APIUpdateApikey(params *APIUpdateApikeyParams, authInfo runtime.ClientAuthInfoWriter) (*APIUpdateApikeyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIUpdateApikeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_update_apikey",
		Method:             "PUT",
		PathPattern:        "/pdnsadmin/apikeys/{apikey_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIUpdateApikeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIUpdateApikeyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_update_apikey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
