// Code generated by go-swagger; DO NOT EDIT.

package apikey

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jbe-dw/go-powerdns-admin/models"
)

// APIUpdateApikeyReader is a Reader for the APIUpdateApikey structure.
type APIUpdateApikeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *APIUpdateApikeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewAPIUpdateApikeyNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewAPIUpdateApikeyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAPIUpdateApikeyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAPIUpdateApikeyNoContent creates a APIUpdateApikeyNoContent with default headers values
func NewAPIUpdateApikeyNoContent() *APIUpdateApikeyNoContent {
	return &APIUpdateApikeyNoContent{}
}

/*APIUpdateApikeyNoContent handles this case with default header values.

OK. ApiKey is changed.
*/
type APIUpdateApikeyNoContent struct {
	Payload *models.APIKey
}

func (o *APIUpdateApikeyNoContent) Error() string {
	return fmt.Sprintf("[PUT /pdnsadmin/apikeys/{apikey_id}][%d] apiUpdateApikeyNoContent  %+v", 204, o.Payload)
}

func (o *APIUpdateApikeyNoContent) GetPayload() *models.APIKey {
	return o.Payload
}

func (o *APIUpdateApikeyNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIKey)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAPIUpdateApikeyNotFound creates a APIUpdateApikeyNotFound with default headers values
func NewAPIUpdateApikeyNotFound() *APIUpdateApikeyNotFound {
	return &APIUpdateApikeyNotFound{}
}

/*APIUpdateApikeyNotFound handles this case with default header values.

Not found. The TSIGKey with the specified tsigkey_id does not exist
*/
type APIUpdateApikeyNotFound struct {
	Payload *models.Error
}

func (o *APIUpdateApikeyNotFound) Error() string {
	return fmt.Sprintf("[PUT /pdnsadmin/apikeys/{apikey_id}][%d] apiUpdateApikeyNotFound  %+v", 404, o.Payload)
}

func (o *APIUpdateApikeyNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *APIUpdateApikeyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAPIUpdateApikeyInternalServerError creates a APIUpdateApikeyInternalServerError with default headers values
func NewAPIUpdateApikeyInternalServerError() *APIUpdateApikeyInternalServerError {
	return &APIUpdateApikeyInternalServerError{}
}

/*APIUpdateApikeyInternalServerError handles this case with default header values.

Internal Server Error. Contains error message
*/
type APIUpdateApikeyInternalServerError struct {
	Payload *models.Error
}

func (o *APIUpdateApikeyInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /pdnsadmin/apikeys/{apikey_id}][%d] apiUpdateApikeyInternalServerError  %+v", 500, o.Payload)
}

func (o *APIUpdateApikeyInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *APIUpdateApikeyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
