// Code generated by go-swagger; DO NOT EDIT.

package zones

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new zones API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for zones API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AxfrExportZone(params *AxfrExportZoneParams, authInfo runtime.ClientAuthInfoWriter) (*AxfrExportZoneOK, error)

	AxfrRetrieveZone(params *AxfrRetrieveZoneParams, authInfo runtime.ClientAuthInfoWriter) (*AxfrRetrieveZoneOK, error)

	CheckZone(params *CheckZoneParams, authInfo runtime.ClientAuthInfoWriter) (*CheckZoneOK, error)

	CreateZone(params *CreateZoneParams, authInfo runtime.ClientAuthInfoWriter) (*CreateZoneCreated, error)

	DeleteZone(params *DeleteZoneParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteZoneNoContent, error)

	ListZone(params *ListZoneParams, authInfo runtime.ClientAuthInfoWriter) (*ListZoneOK, error)

	ListZones(params *ListZonesParams, authInfo runtime.ClientAuthInfoWriter) (*ListZonesOK, error)

	NotifyZone(params *NotifyZoneParams, authInfo runtime.ClientAuthInfoWriter) (*NotifyZoneOK, error)

	PatchZone(params *PatchZoneParams, authInfo runtime.ClientAuthInfoWriter) (*PatchZoneNoContent, error)

	PutZone(params *PutZoneParams, authInfo runtime.ClientAuthInfoWriter) (*PutZoneNoContent, error)

	RectifyZone(params *RectifyZoneParams, authInfo runtime.ClientAuthInfoWriter) (*RectifyZoneOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AxfrExportZone returns the zone in a x f r format
*/
func (a *Client) AxfrExportZone(params *AxfrExportZoneParams, authInfo runtime.ClientAuthInfoWriter) (*AxfrExportZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAxfrExportZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "axfrExportZone",
		Method:             "GET",
		PathPattern:        "/servers/{server_id}/zones/{zone_id}/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AxfrExportZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AxfrExportZoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for axfrExportZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AxfrRetrieveZone retrieves slave zone from its master

  Fails when zone kind is not Slave, or slave is disabled in the configuration. Clients MUST NOT send a body.
*/
func (a *Client) AxfrRetrieveZone(params *AxfrRetrieveZoneParams, authInfo runtime.ClientAuthInfoWriter) (*AxfrRetrieveZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAxfrRetrieveZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "axfrRetrieveZone",
		Method:             "PUT",
		PathPattern:        "/servers/{server_id}/zones/{zone_id}/axfr-retrieve",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AxfrRetrieveZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AxfrRetrieveZoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for axfrRetrieveZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckZone verifies zone contents configuration
*/
func (a *Client) CheckZone(params *CheckZoneParams, authInfo runtime.ClientAuthInfoWriter) (*CheckZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "checkZone",
		Method:             "GET",
		PathPattern:        "/servers/{server_id}/zones/{zone_id}/check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CheckZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckZoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for checkZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateZone creates a new domain returns the zone on creation
*/
func (a *Client) CreateZone(params *CreateZoneParams, authInfo runtime.ClientAuthInfoWriter) (*CreateZoneCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createZone",
		Method:             "POST",
		PathPattern:        "/servers/{server_id}/zones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateZoneCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteZone deletes this zone all attached metadata and rrsets
*/
func (a *Client) DeleteZone(params *DeleteZoneParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteZoneNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteZone",
		Method:             "DELETE",
		PathPattern:        "/servers/{server_id}/zones/{zone_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteZoneNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListZone zones managed by a server
*/
func (a *Client) ListZone(params *ListZoneParams, authInfo runtime.ClientAuthInfoWriter) (*ListZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listZone",
		Method:             "GET",
		PathPattern:        "/servers/{server_id}/zones/{zone_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListZoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListZones lists all zones in a server
*/
func (a *Client) ListZones(params *ListZonesParams, authInfo runtime.ClientAuthInfoWriter) (*ListZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListZonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listZones",
		Method:             "GET",
		PathPattern:        "/servers/{server_id}/zones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListZonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListZonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listZones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NotifyZone sends a DNS n o t i f y to all slaves

  Fails when zone kind is not Master or Slave, or master and slave are disabled in the configuration. Only works for Slave if renotify is on. Clients MUST NOT send a body.
*/
func (a *Client) NotifyZone(params *NotifyZoneParams, authInfo runtime.ClientAuthInfoWriter) (*NotifyZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotifyZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "notifyZone",
		Method:             "PUT",
		PathPattern:        "/servers/{server_id}/zones/{zone_id}/notify",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NotifyZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotifyZoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for notifyZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchZone creates modifies deletes r rsets present in the payload and their comments returns 204 no content on success
*/
func (a *Client) PatchZone(params *PatchZoneParams, authInfo runtime.ClientAuthInfoWriter) (*PatchZoneNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchZone",
		Method:             "PATCH",
		PathPattern:        "/servers/{server_id}/zones/{zone_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchZoneNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutZone modifies basic zone data metadata

  Allowed fields in client body: all except id, url and name. Returns 204 No Content on success.
*/
func (a *Client) PutZone(params *PutZoneParams, authInfo runtime.ClientAuthInfoWriter) (*PutZoneNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putZone",
		Method:             "PUT",
		PathPattern:        "/servers/{server_id}/zones/{zone_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutZoneNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RectifyZone rectifies the zone data

  This does not take into account the API-RECTIFY metadata. Fails on slave zones and zones that do not have DNSSEC.
*/
func (a *Client) RectifyZone(params *RectifyZoneParams, authInfo runtime.ClientAuthInfoWriter) (*RectifyZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRectifyZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "rectifyZone",
		Method:             "PUT",
		PathPattern:        "/servers/{server_id}/zones/{zone_id}/rectify",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RectifyZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RectifyZoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rectifyZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
