// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/jbe-dw/go-powerdns-admin/models"
)

// NewAPIUpdateUserParams creates a new APIUpdateUserParams object
// with the default values initialized.
func NewAPIUpdateUserParams() *APIUpdateUserParams {
	var ()
	return &APIUpdateUserParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAPIUpdateUserParamsWithTimeout creates a new APIUpdateUserParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAPIUpdateUserParamsWithTimeout(timeout time.Duration) *APIUpdateUserParams {
	var ()
	return &APIUpdateUserParams{

		timeout: timeout,
	}
}

// NewAPIUpdateUserParamsWithContext creates a new APIUpdateUserParams object
// with the default values initialized, and the ability to set a context for a request
func NewAPIUpdateUserParamsWithContext(ctx context.Context) *APIUpdateUserParams {
	var ()
	return &APIUpdateUserParams{

		Context: ctx,
	}
}

// NewAPIUpdateUserParamsWithHTTPClient creates a new APIUpdateUserParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAPIUpdateUserParamsWithHTTPClient(client *http.Client) *APIUpdateUserParams {
	var ()
	return &APIUpdateUserParams{
		HTTPClient: client,
	}
}

/*APIUpdateUserParams contains all the parameters to send to the API endpoint
for the api update user operation typically these are written to a http.Request
*/
type APIUpdateUserParams struct {

	/*User*/
	User *models.APIUpdateUserParamsBody
	/*UserID
	  The id of the user to modify or delete

	*/
	UserID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the api update user params
func (o *APIUpdateUserParams) WithTimeout(timeout time.Duration) *APIUpdateUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the api update user params
func (o *APIUpdateUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the api update user params
func (o *APIUpdateUserParams) WithContext(ctx context.Context) *APIUpdateUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the api update user params
func (o *APIUpdateUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the api update user params
func (o *APIUpdateUserParams) WithHTTPClient(client *http.Client) *APIUpdateUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the api update user params
func (o *APIUpdateUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUser adds the user to the api update user params
func (o *APIUpdateUserParams) WithUser(user *models.APIUpdateUserParamsBody) *APIUpdateUserParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the api update user params
func (o *APIUpdateUserParams) SetUser(user *models.APIUpdateUserParamsBody) {
	o.User = user
}

// WithUserID adds the userID to the api update user params
func (o *APIUpdateUserParams) WithUserID(userID int64) *APIUpdateUserParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the api update user params
func (o *APIUpdateUserParams) SetUserID(userID int64) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *APIUpdateUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.User != nil {
		if err := r.SetBodyParam(o.User); err != nil {
			return err
		}
	}

	// path param user_id
	if err := r.SetPathParam("user_id", swag.FormatInt64(o.UserID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
