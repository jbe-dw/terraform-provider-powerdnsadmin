// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new user API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	APICreateUser(params *APICreateUserParams, authInfo runtime.ClientAuthInfoWriter) (*APICreateUserCreated, error)

	APIDeleteAccount(params *APIDeleteAccountParams, authInfo runtime.ClientAuthInfoWriter) (*APIDeleteAccountNoContent, error)

	APIDeleteUser(params *APIDeleteUserParams, authInfo runtime.ClientAuthInfoWriter) (*APIDeleteUserNoContent, error)

	APIGetAccountByName(params *APIGetAccountByNameParams, authInfo runtime.ClientAuthInfoWriter) (*APIGetAccountByNameOK, error)

	APIGetUser(params *APIGetUserParams, authInfo runtime.ClientAuthInfoWriter) (*APIGetUserOK, error)

	APIListUsers(params *APIListUsersParams, authInfo runtime.ClientAuthInfoWriter) (*APIListUsersOK, error)

	APIUpdateAccount(params *APIUpdateAccountParams, authInfo runtime.ClientAuthInfoWriter) (*APIUpdateAccountNoContent, error)

	APIUpdateUser(params *APIUpdateUserParams, authInfo runtime.ClientAuthInfoWriter) (*APIUpdateUserNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  APICreateUser adds a user

  This methods adds a new User
*/
func (a *Client) APICreateUser(params *APICreateUserParams, authInfo runtime.ClientAuthInfoWriter) (*APICreateUserCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICreateUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_create_user",
		Method:             "POST",
		PathPattern:        "/pdnsadmin/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICreateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APICreateUserCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_create_user: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APIDeleteAccount deletes a specific account
*/
func (a *Client) APIDeleteAccount(params *APIDeleteAccountParams, authInfo runtime.ClientAuthInfoWriter) (*APIDeleteAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDeleteAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_delete_account",
		Method:             "DELETE",
		PathPattern:        "/pdnsadmin/accounts/{account_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDeleteAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIDeleteAccountNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_delete_account: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APIDeleteUser deletes a specific user
*/
func (a *Client) APIDeleteUser(params *APIDeleteUserParams, authInfo runtime.ClientAuthInfoWriter) (*APIDeleteUserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDeleteUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_delete_user",
		Method:             "DELETE",
		PathPattern:        "/pdnsadmin/users/{user_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDeleteUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIDeleteUserNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_delete_user: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APIGetAccountByName gets a specific account on the server
*/
func (a *Client) APIGetAccountByName(params *APIGetAccountByNameParams, authInfo runtime.ClientAuthInfoWriter) (*APIGetAccountByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIGetAccountByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_get_account_by_name",
		Method:             "GET",
		PathPattern:        "/pdnsadmin/accounts/{account_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIGetAccountByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIGetAccountByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_get_account_by_name: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APIGetUser gets a specific user on the server
*/
func (a *Client) APIGetUser(params *APIGetUserParams, authInfo runtime.ClientAuthInfoWriter) (*APIGetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIGetUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_get_user",
		Method:             "GET",
		PathPattern:        "/pdnsadmin/users/{username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIGetUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIGetUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_get_user: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APIListUsers gets all user entries
*/
func (a *Client) APIListUsers(params *APIListUsersParams, authInfo runtime.ClientAuthInfoWriter) (*APIListUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIListUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_list_users",
		Method:             "GET",
		PathPattern:        "/pdnsadmin/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIListUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIListUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_list_users: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APIUpdateAccount modifies a specific account on the server with supplied parameters
*/
func (a *Client) APIUpdateAccount(params *APIUpdateAccountParams, authInfo runtime.ClientAuthInfoWriter) (*APIUpdateAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIUpdateAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_update_account",
		Method:             "PUT",
		PathPattern:        "/pdnsadmin/accounts/{account_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIUpdateAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIUpdateAccountNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_update_account: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APIUpdateUser modifies a specific user on the server with supplied parameters
*/
func (a *Client) APIUpdateUser(params *APIUpdateUserParams, authInfo runtime.ClientAuthInfoWriter) (*APIUpdateUserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIUpdateUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_update_user",
		Method:             "PUT",
		PathPattern:        "/pdnsadmin/users/{user_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIUpdateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIUpdateUserNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_update_user: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
