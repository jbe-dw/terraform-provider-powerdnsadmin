// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/jbe-dw/go-powerdns-admin/models"
)

// APICreateUserReader is a Reader for the APICreateUser structure.
type APICreateUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *APICreateUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewAPICreateUserCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAPICreateUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAPICreateUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAPICreateUserCreated creates a APICreateUserCreated with default headers values
func NewAPICreateUserCreated() *APICreateUserCreated {
	return &APICreateUserCreated{}
}

/*APICreateUserCreated handles this case with default header values.

Created
*/
type APICreateUserCreated struct {
	Payload *models.User
}

func (o *APICreateUserCreated) Error() string {
	return fmt.Sprintf("[POST /pdnsadmin/users][%d] apiCreateUserCreated  %+v", 201, o.Payload)
}

func (o *APICreateUserCreated) GetPayload() *models.User {
	return o.Payload
}

func (o *APICreateUserCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAPICreateUserBadRequest creates a APICreateUserBadRequest with default headers values
func NewAPICreateUserBadRequest() *APICreateUserBadRequest {
	return &APICreateUserBadRequest{}
}

/*APICreateUserBadRequest handles this case with default header values.

Unprocessable Entry, the User data provided has issues
*/
type APICreateUserBadRequest struct {
	Payload *models.Error
}

func (o *APICreateUserBadRequest) Error() string {
	return fmt.Sprintf("[POST /pdnsadmin/users][%d] apiCreateUserBadRequest  %+v", 400, o.Payload)
}

func (o *APICreateUserBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *APICreateUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAPICreateUserInternalServerError creates a APICreateUserInternalServerError with default headers values
func NewAPICreateUserInternalServerError() *APICreateUserInternalServerError {
	return &APICreateUserInternalServerError{}
}

/*APICreateUserInternalServerError handles this case with default header values.

Internal Server Error. There was a problem creating the user
*/
type APICreateUserInternalServerError struct {
	Payload *models.Error
}

func (o *APICreateUserInternalServerError) Error() string {
	return fmt.Sprintf("[POST /pdnsadmin/users][%d] apiCreateUserInternalServerError  %+v", 500, o.Payload)
}

func (o *APICreateUserInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *APICreateUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
