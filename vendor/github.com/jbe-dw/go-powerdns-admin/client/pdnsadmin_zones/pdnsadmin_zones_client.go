// Code generated by go-swagger; DO NOT EDIT.

package pdnsadmin_zones

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new pdnsadmin zones API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for pdnsadmin zones API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	APILoginCreateZone(params *APILoginCreateZoneParams, authInfo runtime.ClientAuthInfoWriter) (*APILoginCreateZoneCreated, error)

	APILoginDeleteZone(params *APILoginDeleteZoneParams, authInfo runtime.ClientAuthInfoWriter) (*APILoginDeleteZoneNoContent, error)

	APILoginListZones(params *APILoginListZonesParams, authInfo runtime.ClientAuthInfoWriter) (*APILoginListZonesOK, error)

	SynchronizeDomains(params *SynchronizeDomainsParams, authInfo runtime.ClientAuthInfoWriter) (*SynchronizeDomainsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  APILoginCreateZone creates a new domain returns the zone on creation
*/
func (a *Client) APILoginCreateZone(params *APILoginCreateZoneParams, authInfo runtime.ClientAuthInfoWriter) (*APILoginCreateZoneCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPILoginCreateZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_login_create_zone",
		Method:             "POST",
		PathPattern:        "/pdnsadmin/zones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APILoginCreateZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APILoginCreateZoneCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_login_create_zone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APILoginDeleteZone deletes this zone all attached metadata and rrsets
*/
func (a *Client) APILoginDeleteZone(params *APILoginDeleteZoneParams, authInfo runtime.ClientAuthInfoWriter) (*APILoginDeleteZoneNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPILoginDeleteZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_login_delete_zone",
		Method:             "DELETE",
		PathPattern:        "/pdnsadmin/zones/{zone_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APILoginDeleteZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APILoginDeleteZoneNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_login_delete_zone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APILoginListZones lists all zones in a server
*/
func (a *Client) APILoginListZones(params *APILoginListZonesParams, authInfo runtime.ClientAuthInfoWriter) (*APILoginListZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPILoginListZonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_login_list_zones",
		Method:             "GET",
		PathPattern:        "/pdnsadmin/zones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APILoginListZonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APILoginListZonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_login_list_zones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SynchronizeDomains syncs p DNS with p DNS admin
*/
func (a *Client) SynchronizeDomains(params *SynchronizeDomainsParams, authInfo runtime.ClientAuthInfoWriter) (*SynchronizeDomainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSynchronizeDomainsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "synchronizeDomains",
		Method:             "GET",
		PathPattern:        "/sync_domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SynchronizeDomainsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SynchronizeDomainsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for synchronizeDomains: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
