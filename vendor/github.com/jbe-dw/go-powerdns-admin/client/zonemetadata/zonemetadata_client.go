// Code generated by go-swagger; DO NOT EDIT.

package zonemetadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new zonemetadata API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for zonemetadata API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateMetadata(params *CreateMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMetadataNoContent, error)

	DeleteMetadata(params *DeleteMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMetadataNoContent, error)

	GetMetadata(params *GetMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*GetMetadataOK, error)

	ListMetadata(params *ListMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*ListMetadataOK, error)

	ModifyMetadata(params *ModifyMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyMetadataNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateMetadata creates a set of metadata entries

  Creates a set of metadata entries of given kind for the zone. Existing metadata entries for the zone with the same kind are not overwritten.
*/
func (a *Client) CreateMetadata(params *CreateMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMetadataNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMetadata",
		Method:             "POST",
		PathPattern:        "/servers/{server_id}/zones/{zone_id}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMetadataNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteMetadata deletes all items of a single kind of domain metadata
*/
func (a *Client) DeleteMetadata(params *DeleteMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMetadataNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMetadata",
		Method:             "DELETE",
		PathPattern:        "/servers/{server_id}/zones/{zone_id}/metadata/{metadata_kind}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMetadataNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMetadata gets the content of a single kind of domain metadata as a list of meta data objects
*/
func (a *Client) GetMetadata(params *GetMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*GetMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMetadata",
		Method:             "GET",
		PathPattern:        "/servers/{server_id}/zones/{zone_id}/metadata/{metadata_kind}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListMetadata gets all the meta data associated with the zone
*/
func (a *Client) ListMetadata(params *ListMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*ListMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listMetadata",
		Method:             "GET",
		PathPattern:        "/servers/{server_id}/zones/{zone_id}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ModifyMetadata modifies the content of a single kind of domain metadata
*/
func (a *Client) ModifyMetadata(params *ModifyMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyMetadataNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "modifyMetadata",
		Method:             "PUT",
		PathPattern:        "/servers/{server_id}/zones/{zone_id}/metadata/{metadata_kind}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyMetadataNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for modifyMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
